import pandas as pd
import datetime
import pyupbit
import time
import numpy as np
import pymysql
import matplotlib.pyplot as plt

# DB 연결
conn = pymysql.connect(host='localhost', port=3306, db='bitcoin',
                                    user='root', passwd='dkagh01', charset='utf8')


# 분 단위 200개 데이터 씩, pyupbit에서 가져와서 DB에 저장 (완성본)
def min_data_load():
    end_date = None  # 현재 시간 기준으로 설정
    df_new = pd.DataFrame()
    target_time = datetime.datetime.strptime('2017-09-25 12:00:00', '%Y-%m-%d %H:%M:%S')  # upbit 시작 데이터 시점
    # target_time = datetime.datetime.strptime('2021-11-05 12:00:00', '%Y-%m-%d %H:%M:%S')  # test용
    i = 0

    while True:
        df = pyupbit.get_ohlcv(ticker="KRW-BTC", interval='minute1', to=end_date)
        end_date = df.index[0]
        df_new = df_new.append(df)  # df를 df_new에 합침
        time.sleep(0.5)     # 0.5초 쉬고
        print(i, end_date)  # 프로그램 running 중임을 표시
        i += 1
        # target_time 보다 작을때까지만 running
        if end_date <= target_time:
            break

    df_new = df_new.sort_index()  # 일자 기준으로 sort

    # df index 해제
    df_new.index.name = "datetime"
    df_new = df_new.reset_index()
    
    # DB에 df의 데이터 입력
    with conn.cursor() as curs:
        for r in df_new.itertuples():
            sql = f"REPLACE INTO daily_price VALUES ('{r.datetime}', {r.open}, {r.high}, {r.low}, {r.close}, {r.volume})"
            curs.execute(sql)
        conn.commit()

    # DB에서 data 가져오기 (검증)
    sql = "SELECT * FROM daily_price"
    df_new = pd.read_sql(sql, conn)
    print(df_new.tail())

    return df_new


# DB에 있는 분 단위 데이터 가져오기
def min_data_load_fromDB():
    sql = "SELECT * FROM daily_price"
    df_new = pd.read_sql(sql, conn)
    print(df_new.tail())

    return df_new


# 시간 단위로 가져온 전체 data를 resampling 하기_원하는 시간 기준 입력 (완성본). CSV 데이터로 가져옴
def day_resampling(hour = '11h'):    # 11시를 default로
    # 두가지 방법으로 가져올수 있음.
    # 1) hour_data_load() 로 가져오기
    # df = hour_data_load()

    # 2) csv로 시간 단위 데이터 가져오기
    df = pd.read_csv('C:\\Users\\KDH\\PycharmProjects\\bitcoin\\hour_data.csv')
    df['Unnamed: 0'] = pd.to_datetime(df['Unnamed: 0'])     # 열을 datetime으로 변경하고
    df.rename(columns={'Unnamed: 0': 'Time'}, inplace=True) # 열이름 변경하고
    df.set_index('Time', inplace=True)                # datetime 열을 index로 설정

    # 시간 단위 데이터 resampling 하기
    df_resampling = df.resample('24H', offset=hour).agg(\
                                    {'open': 'first', 'high': 'max', 'low': 'min', 'close': 'last', 'volume': 'sum'})
    # csv로 데이터 저장하기
    # df_resampling.to_csv('day_data_'+hour+'.csv')

    return df_resampling


# 일단위 데이터로 backtest
def run_backtest(ticker='KRW-BTC', fee=0.001, k=0.4, risk_rate=0.03, ma=5, hour='11h', loss_cut = 0.20):
    df = day_resampling(hour)
    df['range'] = (df['high'] - df['low']).shift(1)
    df['range_rate'] = (df['range'] / df['open']) * 100
    df['ma5'] = df['close'].rolling(window=ma).mean().shift(1)
    df['decision'] = np.where((df['high'] > df['open'] + df['range'] * k) & (df['high'] > df['ma5']), 'buy', np.nan)
    df['buy_price'] = np.where(df['decision'] == 'buy', np.where(df['open'] + df['range'] * k > df['ma5'], df['open'] + df['range'] * k, df['ma5']), np.nan)
    df['sell_price'] = np.nan

    # 하기는 sell_price를 입력하기 위한 구간
    # 손절인 경우, price를 가져와야함.
    # min DB로 부터 data 가져오기
    min_df = min_data_load_fromDB()
    min_df = min_df.set_index('datetime')

    buy_case = (df['decision'] == 'buy')
    # buy인 경우의 날짜를 list로 만들기
    buy_date = df[buy_case].index

    for start_min in buy_date:
        try:
            end_min = start_min + datetime.timedelta(1) - datetime.timedelta(minutes=1)
            selected_min_df = min_df[start_min: end_min]['low']
            filtered_min = (selected_min_df >= df.loc[start_min]['buy_price'])
            buy_min = selected_min_df[filtered_min].index[0]
            min_df_after_buy = selected_min_df.truncate(before=buy_min)
            filtered_after_buy = (min_df_after_buy < df.loc[start_min]['buy_price'] * (1 - loss_cut))
            loss_cut_price = min_df_after_buy[filtered_after_buy][0]
            if loss_cut_price <= df.loc[start_min]['buy_price'] * (1 - loss_cut):
                df.loc[start_min, 'sell_price'] = df.loc[start_min]['buy_price'] * (1 - loss_cut)
        except:
            df.loc[start_min, 'sell_price'] = df.loc[start_min, 'close']

    df['buying_rate'] = np.where(risk_rate / df['range_rate'] * 100 > 1, 1, risk_rate / df['range_rate'] * 100)
    df['ror'] = np.where(df['decision'] == 'buy', (((df['sell_price'] * (1 - fee)) / \
                                                    (df['buy_price'] * (1 + fee))) - 1) * df['buying_rate'] + 1, 1)
    df['hpr'] = df['ror'].cumprod()
    df['dd'] = (df['hpr'].cummax() - df['hpr']) / df['hpr'].cummax() * 100

    days = df.index[-2] - df.index[0]
    cagr = round((df['hpr'][-2] ** (1 / (days.days / 365)) - 1) * 100, 2)
    mdd = round(df['dd'].max(), 2)

    # winning_rate & 승률 추가하기

    win_mask = df['ror'] > 1  # 마스크 사용
    loss_mask = df['ror'] < 1

    win_counts = win_mask.sum()
    loss_counts = loss_mask.sum()

    buy_counts = df['decision'].value_counts()['buy']
    winning_rate = round(win_counts / buy_counts, 2)

    win_avg = (df.loc[win_mask, 'ror'].sum() - win_counts) / win_counts
    loss_avg = (df.loc[loss_mask, 'ror'].sum() - loss_counts) / loss_counts

    # 퍼센트 표기 및 자릿수 변경
    win_avg = round(win_avg * 100, 2)
    loss_avg = round(loss_avg * 100, 2)

    profit_per_loss = round(win_avg / abs(loss_avg), 2)

    # csv로 데이터 저장하기
    df.to_csv('backtest_'+hour+'_211116.csv')

    # 딕셔너리로 출력값 한번에 return, CAGR, MDD, winning_rate, profit_per_loss
    print(f'GACR(%) : {cagr}, MDD(%) : {mdd}, winning_rate : {winning_rate}, profit_per_loss : {profit_per_loss}')

    return {'GACR(%)': cagr, 'MDD(%)': mdd, 'winning_rate': winning_rate, 'profit_per_loss': profit_per_loss}

    # return df


# 시간단위 모든 data 가져오기
# df = hour_data_load()

# 10시 기준으로 data_resampling
# testdata = day_resampling('10h')

# backtest 실시
run_backtest(hour='11h')

# pyplot 그래프 그리기 (안됨....)
# fig = plt.figure(figsize=(20, 8))
# ax = fig.add_subplot(1, 1, 1)
# ax = ax.twinx()
# ax.plot(df.index, df['close'], color='olive')
# ax.plot(df.index, df['hpr'], color='magenta')
# ax.set_xticklabels(df.index, rotation=90)
# ax.tick_params(axis='x', labelsize=10)
# plt.show()

# 반복문으로 시간대별 가장 수익률 높은 k값 찾기
# hpr = {}
# k_list = np.arange(0.1, 1, 0.1)
#
# for j in range(24):
#     hours = str(j)+'h'
#     for i in k_list:
#         value = run_backtest(k=i, hour=hours)
#         hpr[j, i] = value
#     j += 1

# df_new = pd.DataFrame(hpr)
# df_new = df_new.T
# df_new.to_excel('backtest_total_result.xlsx')


# pyupbit에서 데이터 가져와서 DB에 저장하기
# df = min_data_load()

# DB로부터 min data 불러오기
# df = min_data_load_fromDB()
